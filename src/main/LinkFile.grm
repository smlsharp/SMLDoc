(* LinkFile.grm
 * @author YAMATODANI Kiyoshi
 * @copyright 2010, Tohoku University.
 *)

structure EA = ElaboratedAst
structure LF = LinkFile

  %%
  %term
      EOF
    | ID of string
    | ASTERISK | EQUALOP
    | DOT | DARROW | LBRACE | RBRACE
    | STRUCTURE | SIGNATURE | FUNCTOR | FUNSIG
    | TYPE | VAL | EXCEPTION

%nonterm ident of string
       | arc of EA.moduleType * string
       | fqn of EA.moduleFQN
       | item of LF.item
       | items of LF.item list
       | linkfile of LF.item list

%verbose
%pos int
%start linkfile
%eop EOF
%noshift EOF

%name LinkFile

%%

ident	: ID 		(ID)
	| ASTERISK	("*")
	| EQUALOP	("=")

arc     : STRUCTURE ident (EA.STRUCTURE, ident)
        | SIGNATURE ident (EA.SIGNATURE, ident)
        | FUNCTOR ident (EA.FUNCTOR, ident)
        | FUNSIG ident (EA.FUNCTORSIGNATURE, ident)

fqn     : arc           ([arc])
        | arc DOT fqn   (arc :: fqn)

item    : arc LBRACE items RBRACE     (LF.ModuleDefine(arc, items))
        | arc DARROW fqn              (LF.ModuleReplica(arc, fqn))
        | TYPE ident                  (LF.TypeDefine(ident))
        | TYPE ident DARROW fqn       (LF.TypeReplica(ident, fqn))
        | VAL ident                   (LF.ValDefine(ident))
        | EXCEPTION ident             (LF.ExceptionDefine(ident))

items   :               ([])
        | item items    (item :: items)

linkfile : items        (items)
