(* ml.grm
 *
 * Copyright 1989,1992 by AT&T Bell Laboratories
 * $Id: ML.grm,v 1.9 2007/03/04 13:26:57 kiyoshiy Exp $
 *)

open Ast AstUtil

fun markexp (e, _, _) = e
(*fun markdec((d as MarkDec _, e), _,_) = (d,e)
  | markdec((d,e),a,b) = (MarkDec(d,(a,b)),e)
*)
fun markdec (d as MarkDec _, _,_) = d
  | markdec (d,a,b) = MarkDec(d,(a,b))

fun markty (t as MarkTy _, _, _) = t
  | markty (t, a, b) = MarkTy(t, (a, b))

  %%
  %term
      EOF | SEMICOLON
    | ID of string | TYVAR of string
    | INT of int | INT0 of int
    | WORD of int
    | REAL of string
    | STRING of string 
    | CHAR of string
    | ABSTYPE | AND
    | ARROW | AS | BAR | CASE | DATATYPE | DOTDOTDOT | ELSE | END | EQUALOP
    | EQTYPE | EXCEPTION | DO | DOT | DARROW | FN | FUN | FUNCTOR | HANDLE 
    | HASH | IF | IN | INCLUDE | INFIX | INFIXR | LAZY | LET | LOCAL | NONFIX
    | OF | OP | OPEN | OVERLOAD | RAISE | REC | SHARING | SIG | SIGNATURE
    | STRUCT | STRUCTURE | THEN | TYPE | VAL | WHERE | WHILE | WILD | WITH
    | WITHTYPE | ASTERISK | COLON | COLONGT | COMMA | LBRACE | LBRACKET
    | LPAREN | RBRACE | RBRACKET | RPAREN | ORELSE | ANDALSO | FUNSIG
    | VECTORSTART | BEGINQ | ENDQ of string | OBJL of string | AQID of string
    | USE
    (* SML# extensions *)
    | ATOM | BOXED | CAST | CDECL | DOUBLE | EXPORT | FFIAPPLY
    | IMPORT | SIZEOF | STDCALL | USEOBJ

%nonterm ident of string
       | id of string
       | int of int
       | op_op of unit
       | qid of string list 
       | selector of string
       | tycon of string list
       | tlabel of tyrow
       | tlabels  of (tyrow * pos) list
       | ty' of ty
       | tuple_ty of (ty * pos) list
       | ty of ty
       | ty0_pc of (ty * srcpos) list
       | match of  rule list
       | rule of  rule
       | elabel of  (string * exp)
       | elabels of  (string * exp) list
       | exp_ps of  exp list
       | exp of  exp 
       | app_exp of  exp list
       | aexp of  exp
       | exp_list of  exp list
       | exp_2c  of  exp list
       | quote of  exp list
       | ot_list of  exp list
       | pat of pat
       | apat of pat
       | apat' of  pat
       | plabel of  (string * pat)
       | plabels of  ((string * pat) list * bool)
       | pat_2c of  pat list
       | pat_list of  pat list
       | or_pat_list of  pat list
       | vb of  (vb * pos) list
       | constraint of ty option
       | rvb of  (rvb * pos) list
       | fb' of  clause list
       | fb of  (fb * pos) list
       | apats of pat list
       | clause of  clause
       | tb of (tb * pos) list
       | tyvars of tyvar list
       | tyvarseq of tyvar list
       | tyvar_pc of tyvar list
       | db of  (db * pos) list
       | dbrhs of dbrhs
       | constrs of (((string * pos * ty option) * region) * pos) list
       | constr of  (string * pos * ty option) * region
       | eb of (eb * pos) list
       | qid_p of string list list
       | fixity of fixity
       | ldec of dec
       | exp_pa of   exp list
       | ldecs of  dec
       | ops of string list
       | spec_s of  (spec * srcpos) list
       | spec of  (spec * srcpos) list
       | idents of (spec * srcpos) list
       | strspec of (((string * sigexp * path option) * region) * srcpos) list
       | fctspec of (((string * fsigexp) * region) * srcpos) list
       | tyspec of
         (((string * tyvar list * srcpos * ty option) * region) * srcpos) list
       | valspec of (((string * srcpos * ty) * region) * srcpos) list
       | exnspec of (((string * srcpos * ty option) * region) * srcpos) list
       | sharespec of (spec * srcpos) list
       | patheqn of string list list
       | whspec of wherespec list
       | sign of  sigexp
       | sigconstraint_op of  sigexp sigConst
       | fsigconstraint_op of fsigexp sigConst
       | sigb of  (sigb * srcpos) list
       | fsigb of  (fsigb * srcpos) list
       | fsig of  fsigexp
       | str of  strexp
       | arg_fct of  (strexp * bool) list
       | strdec of  dec
       | strdecs of  dec
       | sdec of  dec
       | sdecs of  dec
       | sdecs' of  dec
       | strb of  (strb * pos) list
       | fparam of  string option * sigexp
       | fparamList of  (string option * sigexp) list
       | fctb of  (fctb * pos) list
       | fct_exp of fsigexp sigConst -> fctexp
       | interdec of (dec * pos)
       (* SML# extensions *)
       | cconv of unit
       | ffiApplyArg of unit
       | ffiApplyArgs of unit
       | ffiApplyArgSeq of unit
       | ffityrow of unit
       | ffityseq of unit
       | ffiArgs of unit
       | ffiContyArg of unit
       | ffiAtty of unit
       | ffitupleseq of unit
       | ffiTupleTy of unit
       | ffiFunArg of unit
       | ffiFunty of unit
       | fficconv of unit
       | ffity of unit

%verbose
%pos int
%start interdec
%eop EOF SEMICOLON
%noshift EOF

%nonassoc WITHTYPE
%right AND
%right ARROW
%right DARROW 
%left DO
%left ELSE
%left RAISE
%right HANDLE
%right ORELSE
%right ANDALSO
%right AS
%left COLON


%name ML

%keyword ABSTYPE AND AS CASE DATATYPE DOTDOTDOT ELSE END 
  EQTYPE EXCEPTION  DO  DARROW  FN  FUN  FUNCTOR  HANDLE
  IF IN INCLUDE  INFIX  INFIXR  LAZY LET  LOCAL  NONFIX  OF  OP
  OPEN OVERLOAD  RAISE  REC  SHARING  SIG  SIGNATURE  STRUCT
  STRUCTURE THEN TYPE VAL WHILE WHERE WITH WITHTYPE
  ORELSE ANDALSO 

%change -> VAL | -> THEN | -> ELSE | -> LPAREN | -> SEMICOLON | 
        DARROW -> EQUALOP | EQUALOP -> DARROW | AND -> ANDALSO | COLON -> OF |
        SEMICOLON -> COMMA | COMMA -> SEMICOLON |
        -> IN ID END | -> ELSE ID

%value ID ("BOGUS")
%value TYVAR ("BOGUS")
%value INT (1)
%value INT0 (0)
%value WORD (0)
%value REAL ("0.0")
%value STRING ("")
%value CHAR ("a")

%%

int	: INT		(INT)
	| INT0		(INT0)

id	: ID		(ID)
	| ASTERISK	("*")

ident	: ID 		(ID)
	| ASTERISK	("*")
	| EQUALOP	("=")

op_op	: OP		()
	| 		()

qid	: ID DOT qid	(ID :: qid)
	| ident		([ident])

selector: id		(id)
	| INT		(Int.toString INT)

tycon   : ID DOT tycon		(ID :: tycon)
	| ID			([ID])

tlabel	: selector COLON ty
                (TyRow((selector, COLONright, ty), (selectorleft, tyright)))

tlabels : tlabel COMMA tlabels	((tlabel, tlabelright) :: tlabels)
	| tlabel		([(tlabel, tlabelright)])

ty'	: TYVAR		(markty(VarTy(TYVAR), TYVARleft, TYVARright))
	| LBRACE tlabels RBRACE
          (markty(RecordTy(LBRACEright, tlabels), LBRACEleft, RBRACEright))
	| LBRACE RBRACE
	  (markty(RecordTy(LBRACEright,[]), LBRACEleft, RBRACEright))
	| LPAREN ty0_pc RPAREN tycon  
          (markty(ConTy((tycon,LPARENright,ty0_pc)), LPARENleft, tyconright))
	| LPAREN ty RPAREN
          (markty(EnclosedTy(LPARENright, ty), LPARENleft, RPARENright))
	| ty' tycon
	  (markty(ConTy((tycon,0,[(ty',ty'right)])), ty'left, tyconright))
	| tycon
	  (markty(ConTy((tycon,0,[])), tyconleft, tyconright))

tuple_ty : ty' ASTERISK tuple_ty
                ((ty', ty'right) :: tuple_ty)
	 | ty' ASTERISK ty'
                ([(ty'1, ty'1right), (ty'2, ty'2right)])

ty	: tuple_ty  (markty(TupleTy(tuple_ty), tuple_tyleft, tuple_tyright))
	| ty ARROW ty
          (markty
           (
             ConTy([arrowTycon], 0, [(ty1, ty1right),(ty2, ty2right)]),
             ty1left,
             ty2right
           ))
	| ty' 		(markty(ty', ty'left, ty'right))
	
ty0_pc	: ty COMMA ty		([(ty1,ty1right),(ty2,ty2right)])
	| ty COMMA ty0_pc 	((ty,tyright) :: ty0_pc)

(*********** foreign function interface *************)

ffiApplyArg : app_exp COLON ffity ()
            | SIZEOF LPAREN ty RPAREN ()
            | SIZEOF LPAREN ty RPAREN ASTERISK aexp ()

ffiApplyArgSeq : ffiApplyArg ()
               | ffiApplyArg COMMA ffiApplyArgSeq ()

ffiApplyArgs : ()
             | ffiApplyArgSeq ()

(* FFI type representation *)

ffityrow : ID COLON ffity ()
         | ID COLON ffity COMMA ffityrow ()

ffityseq : ffity COMMA ffity ()
         | ffity COMMA ffityseq ()

ffiArgs : ffiAtty ()
        | LPAREN ffityseq RPAREN ()

ffiContyArg : ()
            | ffiArgs ()

ffiAtty : LPAREN ffity RPAREN ()
        | TYVAR ()
        | ffiContyArg tycon ()
        | LBRACE ffityrow RBRACE ()
        | LBRACE RBRACE ()

ffitupleseq : ffiAtty ASTERISK ffiAtty ()
            | ffiAtty ASTERISK ffitupleseq ()

ffiTupleTy : ffitupleseq ()

ffiFunArg : LPAREN RPAREN ()
          | ffiArgs ()
          | ffiTupleTy ()

ffiFunty : ffiFunArg ARROW ffity ()
         | fficconv ffiFunArg ARROW ffity ()

fficconv : CDECL      ()
         | STDCALL    ()

ffity : ffiAtty ()
      | ffiFunty ()
      | ffiTupleTy ()

(****************************************)

match	: rule			([rule])
	| rule BAR match	(rule :: match)

rule	: pat DARROW exp        (Rule{pat=pat, 
				      exp=markexp(exp,expleft,expright)})

(* EXPRESSION *)

elabel	: selector EQUALOP exp	(selector,exp)

elabels : elabel COMMA elabels	(elabel :: elabels)
	| elabel	        ([elabel])

exp_ps	: exp		        ([exp])
	| exp SEMICOLON exp_ps	(exp :: exp_ps)

exp	: exp HANDLE match	()
        | exp ORELSE exp        ()
	 | exp ANDALSO exp      ()
	 | exp COLON ty	        ()
	 | app_exp	        ()
	 | FN match	        ()
	 | CASE exp OF match	()
	 | WHILE exp DO exp	()
	 | IF exp THEN exp ELSE exp ()
	 | RAISE exp	     ()
         | CAST LPAREN exp RPAREN ()
         | exp COLON IMPORT ffity ()
         | FFIAPPLY cconv aexp LPAREN ffiApplyArgs RPAREN COLON ffity ()

cconv : ()
      | fficconv ()

app_exp	: aexp	        ([()])
	| aexp app_exp	(() :: app_exp)

aexp	: OP ident		()
        | ident ()
	| ID DOT qid		()
	| int			()
	| WORD			()
	| REAL			()
	| STRING		()
	| CHAR 		        ()
	| HASH selector		()
	| LBRACE elabels RBRACE	()
	| LBRACE RBRACE		()
	| LPAREN RPAREN		()
	| LPAREN exp_ps RPAREN	()
	| LPAREN exp_2c RPAREN	()
	| LBRACKET exp_list RBRACKET     ()
	| LBRACKET RBRACKET	()
        | VECTORSTART exp_list RBRACKET ()
        | VECTORSTART RBRACKET  ()
	| LET ldecs IN exp_ps END	()
        | AQID                  ()
        | quote                 ()

quote   : BEGINQ ENDQ           ([QuoteExp ENDQ])
        | BEGINQ ot_list ENDQ   (ot_list @ [QuoteExp ENDQ])

ot_list : OBJL aexp             ([QuoteExp OBJL,AntiquoteExp aexp])
        | OBJL aexp ot_list     (QuoteExp OBJL :: AntiquoteExp aexp ::
                                            ot_list)

exp_2c	: exp COMMA exp_2c	(exp :: exp_2c)
	| exp COMMA exp		([exp1, exp2])

exp_list : exp			([exp])
	 | exp COMMA exp_list	(exp :: exp_list)

pat	: pat AS pat		(layered(pat1, pat2))
	| pat COLON ty		(ConstraintPat{pattern=pat, constraint=ty})
	| apats			(FlatAppPat apats)

apat	: apat'		(apat')
	| LPAREN pat RPAREN	(pat)
	| id			(VarPat [id])
	| LPAREN RPAREN		(unitPat)
	| LPAREN pat COMMA  pat_list RPAREN	
  				(TuplePat(pat :: pat_list))
	| LPAREN pat BAR or_pat_list RPAREN
				(OrPat(pat :: or_pat_list))

apat'	: OP ident		(VarPat [ident])
	| ID DOT qid		(VarPat (ID :: qid))
	| int			(IntPat int)
	| WORD			(WordPat WORD)
	| STRING		(StringPat STRING)
        | CHAR 			(CharPat CHAR)
	| WILD			(WildPat)
	| LBRACKET RBRACKET	(ListPat nil)
	| LBRACKET pat_list 
		RBRACKET	(ListPat pat_list)
        | VECTORSTART RBRACKET  (VectorPat nil)
	| VECTORSTART pat_list 
		RBRACKET	(VectorPat pat_list)
	| LBRACE RBRACE		(unitPat)
	| LBRACE plabels RBRACE	
		            (let val (d,f) = plabels
			     in MarkPat(RecordPat{def=d,flexibility=f},
					(LBRACEleft,RBRACEright)) end)

plabel	: selector EQUALOP pat	((selector,pat))
	| ID			(ID, VarPat [ID])
	| ID AS pat		(ID, 
				 LayeredPat{varPat=VarPat [ID], 
					    expPat=pat})
	| ID COLON ty		(ID,
				 ConstraintPat{pattern=VarPat [ID],
					       constraint=ty})
	| ID COLON ty AS pat	(ID,
				 LayeredPat
				 {varPat=ConstraintPat{pattern=VarPat [ID],
						       constraint=ty},
				  expPat=pat})

plabels : plabel COMMA plabels	(let val (a,(b,fx))=(plabel, plabels)
				 in (a::b, fx) end)
	| plabel		([plabel],false)
	| DOTDOTDOT		(nil, true)

pat_list: pat			([pat])
	| pat COMMA pat_list	(pat :: pat_list)

or_pat_list : pat			([pat])
	    | pat BAR or_pat_list	(pat :: or_pat_list)

vb	: vb AND vb		(vb1 @ vb2)
	| LAZY pat EQUALOP exp
          ([(Vb({exp=exp, pat=pat, lazyp=true},(patleft,expright)), expright)])
	| pat EQUALOP exp
          ([(Vb({exp=exp, pat=pat, lazyp=false},(patleft,expright)),expright)])

constraint :	 		(NONE)
	   | COLON ty	 	(SOME ty)

rvb	: id constraint EQUALOP exp
	  ([(Rvb({var=id,
		 resultty=constraint,
		 exp=exp,lazyp=false}, (idleft,expright)), expright)])
	| OP id constraint EQUALOP exp
		  ([(Rvb({var=id,
			 resultty=constraint,
		         exp=exp,lazyp=false}, (OPleft,expright)), expright)])
	| rvb AND rvb     (rvb1 @ rvb2)
        | LAZY id constraint EQUALOP exp
                  ([(Rvb({var=id,
                         resultty=constraint,
                         exp=exp,lazyp=true}, (idleft,expright)), expright)])
        | LAZY OP id constraint EQUALOP exp
                  ([(Rvb({var=id,
                         resultty=constraint,
                         exp=exp,lazyp=true}, (OPleft,expright)), expright)])


fb'	: clause		([clause])
	| clause BAR fb'	(clause :: fb')

fb	: fb'	([(MarkFb(Fb(fb',false), (fb'left,fb'right)),fb'right)])
	| LAZY fb'	([(MarkFb(Fb(fb',true), (fb'left,fb'right)),fb'right)])
	| fb' AND fb
                ((MarkFb(Fb(fb',false), (fb'left,fb'right)),fb'right) :: fb)
	| LAZY fb' AND fb
                ((MarkFb(Fb(fb',true), (fb'left,fb'right)),fb'right) :: fb)

apats	: apat			([apat])
	| apat apats		(apat :: apats) 

clause	: apats constraint EQUALOP exp	
	(Clause({pats=apats,
		resultty=constraint,
		exp=markexp(exp,expleft,expright)},(apatsleft,expright)))

tb	: tyvars ID EQUALOP ty
         ([(Tb({tyvars=tyvars,tyc=ID,defBeginPos=EQUALOPright,def=ty},
               (tyvarsleft,tyright)),
            tyright)])
	| tb AND tb		(tb1 @ tb2)

tyvars	: TYVAR			([TYVAR])
	| LPAREN tyvar_pc RPAREN  (tyvar_pc)
	|			  (nil)

tyvarseq: TYVAR			([TYVAR])
	| LPAREN tyvar_pc RPAREN  (tyvar_pc)

tyvar_pc: TYVAR	([TYVAR])
	| TYVAR COMMA tyvar_pc
		(TYVAR :: tyvar_pc)

db	: db AND db			(db1 @ db2)
	| tyvars ident EQUALOP dbrhs
          ([(Db({tyc=ident, tyvars=tyvars, rhsBeginPos = EQUALOPright, rhs=dbrhs,lazyp=false},
                     (tyvarsleft,dbrhsright)),dbrhsright)])
        | LAZY tyvars ident EQUALOP dbrhs   
         ([(Db({tyc=ident, tyvars=tyvars, rhsBeginPos = EQUALOPright, rhs=dbrhs,lazyp=true},
                     (tyvarsleft,dbrhsright)),dbrhsright)])

dbrhs   : constrs			(Constrs constrs)
        | DATATYPE tycon		(Repl tycon)

constrs : constr		([(constr, constrright)])
	| constr BAR constrs	((constr, constrright) :: constrs)

constr	: op_op ident
                ((ident, 0, NONE), (op_opleft, identright))
	| op_op ident OF ty
                ((ident, OFright, SOME ty), (op_opleft, identright))

eb	: op_op ident
       ([(EbGen({exn=(ident),etypeBeginPos=0, etype=NONE},
                (op_opleft,identright)),identright)])
	| op_op ident OF ty
       ([(EbGen({exn=(ident),etypeBeginPos=OFright, etype=SOME ty},
                (op_opleft,tyright)), tyright)])
	| op_op ident EQUALOP qid
       ([(EbDef({exn=ident,edef=qid}, (op_opleft,qidright)), qidright)])
	| eb AND eb		(eb1 @ eb2)

qid_p	: qid			([qid])
	| qid qid_p		(qid :: qid_p)

fixity	: INFIX			(INfix 0)
	| INFIX int		(INfix int)
	| INFIXR		(INfixR 0)
	| INFIXR int		(INfixR int)
	| NONFIX		(NONfix)

ldec	: VAL vb		(ValDec(vb,nil))
        | VAL tyvarseq vb	(ValDec(vb,tyvarseq))
	| VAL REC rvb		(ValrecDec(rvb,nil))
	| VAL REC tyvarseq rvb	(ValrecDec(rvb,tyvarseq))
	| FUN fb		(FunDec(fb,nil))
	| FUN tyvarseq fb	(FunDec(fb,tyvarseq))
	| TYPE tb		(TypeDec tb)
	| DATATYPE db
                (DatatypeDec{datatycs=db, withtycsBeginPos = 0, withtycs=[]})
 	| DATATYPE db WITHTYPE tb
          (DatatypeDec
           {datatycs = db, withtycsBeginPos = dbright, withtycs = tb})
	| ABSTYPE db WITH ldecs END
                (AbstypeDec{abstycs=db,
                            withtycsBeginPos = 0, withtycs=[],
                            bodyBeginPos=WITHright, body=ldecs})
	| ABSTYPE db WITHTYPE tb WITH ldecs END
                (AbstypeDec{abstycs=db,
                            withtycsBeginPos = dbright, 
			    withtycs=tb,
                            bodyBeginPos = WITHright,
			    body=ldecs})
	| EXCEPTION eb		(ExceptionDec eb)
	| OPEN qid_p		(OpenDec qid_p)
	| fixity ops		(FixDec{fixity=fixity, ops=ops})
	| OVERLOAD ident COLON ty AS exp_pa
				(OvldDec(ident,ty,exp_pa))

exp_pa	: exp			([exp])
	| exp AND exp_pa	(exp :: exp_pa)

ldecs	: 			(SeqDec nil)
	| ldec ldecs
               (makeSEQdec(markdec(ldec,ldecleft,ldecright), ldecright, ldecs, ldecsright))
	| SEMICOLON ldecs	(ldecs)
	| LOCAL ldecs IN ldecs END ldecs	
 		(makeSEQdec
 		   (markdec(LocalDec(LOCALright,
                                     markdec(ldecs1,ldecs1left,ldecs1right),
                                     INright,
				     markdec(ldecs2,ldecs2left,ldecs2right)),
			    LOCALleft,ENDright),
                    ENDright,
 	            ldecs3,
                    ldecs3right))

ops	: ident			([ident])
	| ident ops 		(ident :: ops)

spec_s	: 			([])
	| spec spec_s		(spec @ spec_s)
	| SEMICOLON spec_s	(spec_s)

spec	: STRUCTURE strspec	([(StrSpec strspec, strspecright)])
        | FUNCTOR fctspec	([(FctSpec fctspec, fctspecright)])
	| DATATYPE db
	    ([(DataSpec{datatycs=db,withtycsBeginPos=0,withtycs=nil},dbright)])
	| DATATYPE db WITHTYPE tb
            ([(DataSpec{datatycs=db,withtycsBeginPos=WITHTYPEright,withtycs=tb},tbright)])
	| TYPE tyspec		([(TycSpec(tyspec,false),tyspecright)])
	| EQTYPE tyspec		([(TycSpec(tyspec,true),tyspecright)])
	| VAL valspec		([(ValSpec valspec,valspecright)])
	| EXCEPTION exnspec	([(ExceSpec exnspec,exnspecright)])
	| SHARING sharespec	(sharespec)
	| INCLUDE sign		([(IncludeSpec sign,signright)])
	| INCLUDE ident idents	((IncludeSpec(VarSig(ident)),identright)
				:: idents)

idents	: ident			([(IncludeSpec(VarSig(ident)),identright)])
	| ident idents		((IncludeSpec(VarSig(ident)),identright)
				 :: idents)

strspec	: strspec AND strspec	(strspec1 @ strspec2)
	| ident COLON sign
        ([(((ident, sign, NONE), (identleft,signright)),signright)])
	| ident COLON sign EQUALOP qid
	([(((ident, sign, SOME(qid)), (identleft, qidright)),qidright)])

fctspec	: fctspec AND fctspec	(fctspec1 @ fctspec2)
	| ident fsig
                ([(((ident, fsig),(identleft,fsigright)),fsigright)])

tyspec	: tyspec AND tyspec	(tyspec1 @ tyspec2)
	| tyvars ID
         ([(((ID,tyvars,0,NONE), (tyvarsleft,IDright)),IDright)])
        | tyvars ID EQUALOP ty
         ([(((ID,tyvars,EQUALOPright,SOME ty), (tyvarsleft,tyright)),tyright)])

valspec	: valspec AND valspec	(valspec1 @ valspec2)
	| op_op ident COLON ty
                ([(((ident,COLONright,ty), (op_opleft,tyright)),tyright)])


exnspec : exnspec AND exnspec	(exnspec1 @ exnspec2)
	| ident
                ([(((ident,0,NONE), (identleft,identright)),identright)])
	| ident OF ty
		([(((ident,OFright,SOME ty),(identleft,tyright)),tyright)])

sharespec: sharespec AND sharespec	(sharespec1 @ sharespec2)
	 | TYPE patheqn	([(ShareTycSpec(patheqn),patheqnright)])
	 | patheqn	([(ShareStrSpec (patheqn),patheqnright)])
	
patheqn : qid EQUALOP qid	([qid1, qid2])
        | qid EQUALOP patheqn	(qid :: patheqn)

whspec  : whspec AND whspec     (whspec1 @ whspec2)
        | TYPE tyvars qid EQUALOP ty
				([WhType(qid,tyvars,EQUALOPright,ty)])
        | qid EQUALOP qid	([WhStruct(qid1,qid2)])

sign	: ident			(MarkSig(VarSig (ident),
				         (identleft,identright)))
	| SIG spec_s END	(MarkSig(BaseSig(SIGright, spec_s),(spec_sleft,spec_sright)))
        | sign WHERE whspec     (MarkSig(AugSig(sign,whspec),(signleft,whspecright)))

sigconstraint_op :		(NoSig)
	| COLON sign		(Transparent(sign))
 	| COLONGT sign		(Opaque(sign))

fsigconstraint_op :		(NoSig)
	| COLON ident		(Transparent(VarFsig (ident)))
 	| COLONGT ident		(Opaque(VarFsig (ident)))

sigb	: sigb AND sigb		(sigb1 @ sigb2)
	| ident EQUALOP sign
          ([(Sigb({name=ident,def=sign},(identleft,signright)),signright)])

fsigb	: fsigb AND fsigb	(fsigb1 @ fsigb2)
	| ident fparamList EQUALOP sign
	([(Fsigb({name=ident,
		 def=BaseFsig{params=fparamList,result=sign}},
                (identleft,signright)),
          signright)])

fsig	: COLON ident	(VarFsig (ident))
	| fparamList COLON sign
			(BaseFsig{params=fparamList,result=sign})

str	: qid	((MarkStr(VarStr(qid),(qidleft,qidright))))
	| STRUCT strdecs END	
		(MarkStr(BaseStr(STRUCTright, strdecs),(STRUCTleft,ENDright)))
	| qid arg_fct
		(MarkStr(AppStr(qid,arg_fct),
			 (qidleft,arg_fctright)))
	| LET strdecs IN str END	
	(MarkStr(LetStr(LETright, strdecs, str), (LETleft,ENDright)))
        | str COLON sign
	        (MarkStr(ConstrainedStr(str,Transparent sign),
		         (strleft,signright)))
        | str COLONGT sign
	        (MarkStr(ConstrainedStr(str,Opaque sign),
		         (strleft,signright)))

arg_fct : LPAREN strdecs RPAREN arg_fct
                ((MarkStr(BaseStr (LPARENright,strdecs),
			  (strdecsleft,strdecsright)),
		  false) :: arg_fct)
	| LPAREN str RPAREN arg_fct	((str, true) :: arg_fct)
	| LPAREN str RPAREN 		([(str, true)])
	| LPAREN strdecs RPAREN
                ([(MarkStr(BaseStr (LPARENright, strdecs),
			   (strdecsleft,strdecsright)),
		   false)])

strdecs	: strdec strdecs
                (makeSEQdec
                 (markdec(strdec,strdecleft,strdecright),strdecright,strdecs,strdecsright))
	| SEMICOLON strdecs	(strdecs)
	|			(SeqDec[])

sdecs	: sdec sdecs		(makeSEQdec (markdec(sdec,sdecleft,sdecright),
                                             sdecright,
					     sdecs,
                                             sdecsright))
	| SEMICOLON sdecs	(sdecs)
	|			(SeqDec[])

sdecs'	: sdec sdecs'		(makeSEQdec (markdec(sdec,sdecleft,sdecright),
                                             sdecright,
					     sdecs',
                                             sdecs'right))
	| sdec			(markdec(sdec, sdecleft,sdecright))

strdec	: STRUCTURE strb	(StrDec strb)
	| FUNCTOR fctb		(FctDec fctb)
	| LOCAL strdecs IN strdecs END
                (LocalDec(LOCALright,
                          markdec(strdecs1, strdecs1left,strdecs1right),
                          INright,
  			  markdec(strdecs2,strdecs2left,strdecs2right)))
	| ldec			(markdec(ldec,ldecleft,ldecright))

sdec	: STRUCTURE strb	(StrDec strb)
	| SIGNATURE sigb	(SigDec sigb)
	| FUNSIG fsigb		(FsigDec fsigb)
	| FUNCTOR fctb		(FctDec fctb)
	| LOCAL sdecs IN sdecs END
                (LocalDec(LOCALright,
                          markdec(sdecs1, sdecs1left,sdecs1right),
                          INright,
			  markdec(sdecs2,sdecs2left,sdecs2right)))
	| ldec			(markdec(ldec,ldecleft,ldecright))
(*
        | USE STRING            (UseDec STRING)
*)

strb	: ident sigconstraint_op EQUALOP str
  		([(Strb({name = ident,def = str, constraint=sigconstraint_op},
		        (identleft,strright)),
                   strright)])
	| strb AND strb		(strb1 @ strb2)

fparam	: ID COLON sign		((SOME(ID),sign))
	| spec_s
              (* ToDo *)
                ((NONE,MarkSig(BaseSig(spec_sleft, spec_s),
			       (spec_sleft,spec_sright))))

fparamList
	: LPAREN fparam	RPAREN			([fparam])
	| LPAREN fparam RPAREN fparamList	(fparam :: fparamList)

fctb	: ident fparamList sigconstraint_op EQUALOP str
	([(Fctb({name = ident,
                def =
                BaseFct
                {params=fparamList, body=str,
		 constraint=sigconstraint_op}},
	       (identleft,strright)),
           strright)])
	| ident fsigconstraint_op EQUALOP fct_exp
		([(Fctb({name=ident,
			def=fct_exp (fsigconstraint_op)},
		       (identleft,fct_expright)), fct_expright)])
	| fctb AND fctb	   (fctb1 @ fctb2)

fct_exp: qid	(fn constraint => VarFct(qid,constraint))
       | qid arg_fct
  		(fn constraint =>
		    MarkFct(AppFct(qid,arg_fct,constraint),
			    (qidleft,arg_fctright)))
       | LET strdecs IN fct_exp END	
		(fn constraint =>
		   MarkFct(LetFct(LETright, strdecs, fct_exp constraint),
		   (LETleft,ENDright)))

interdec: sdecs'	(markdec(sdecs',sdecs'left,sdecs'right), sdecs'right)

	| exp		(markdec(ValDec([(Vb({exp=exp,pat=VarPat itsym,lazyp=false},(expleft,expright)), expright)],nil),
				 expleft,expright), expright)
